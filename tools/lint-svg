#!/usr/bin/env node
const xml2js = require("xml2js").parseString;
const chalk = require("chalk");
const util = require("util");
util.inspect.styles.string = "cyan";
util.inspect.styles.regexp = "grey";
const inspect = value => util.inspect(value, {colors: true});

/**
 * All the rules we use for SVG linting
 * Are given a single argument, the parsed SVG object
 * Should throw an error if it fails
 */
const RULES = [
    function rootAttributes(svg) {
        const expected = {
            xmlns: "http://www.w3.org/2000/svg", 
            viewBox: "0 0 24 24", 
            "aria-labelledby": "title", 
            role: "img"
        };
        let msg = [];

        for (let attr in expected) {
            if (svg.$[attr] !== expected[attr]) {
                msg.push(`Attribute ${chalk.bold(attr)} should be ${inspect(expected[attr])}, was ${inspect(svg.$[attr])}`);
            }
        }
        Object.keys(svg.$)
            .filter(attr => !expected.hasOwnProperty(attr))
            .forEach(attr => {
                msg.push(`Unexpected attribute ${chalk.bold(attr)}`);
            });

        if (msg.length) {
            throw new Error(msg.join("\n"));
        }
    }
];

async function lintSVG(svgStr) {
    const svg = (await parseXML(svgStr)).svg;

    const messages = [];
    for (let rule of RULES) {
        try {
            rule(svg);
        } catch (e) {
            messages.push(e.message);
        }
    }
    return messages;
}

/**
 * Parses an XML string to a JS object
 * @param {String} xmlStr  The XML string
 * @returns {Promise<Object>}
 */
function parseXML(xmlStr) {
    return new Promise((res,rej)=>{
        xml2js(xmlStr, (err, result)=>{
            if (err) {
                return rej(err);
            }
            res(result);
        });
    });
}

module.exports = async (name, content) => {
    const messages = await lintSVG(content);
    if (messages.length) {
        console.log(chalk.red(`✖ ${name}`));
        for (let msg of messages) {
            console.log(msg.split("\n")
                .map(msg => `    ${chalk.red(msg)}`)
                .join("\n"));
        }
    } else {
        console.log(chalk.green(`✔ ${name}`));
    }
    return !messages.length;
};
if (require.main === module) {
    // TODO: get file paths from argv and lint them
}